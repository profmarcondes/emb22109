/* Generated by itemis CREATE code generator. */

#include "Semaforo.h"

/*! \file
Implementation of the state machine 'semaforo'
*/




Semaforo::Semaforo() noexcept
{
	this->ifacePedestrian.parent = this;
	this->ifaceCar.parent = this;
	this->ifaceTimming.parent = this;
	for (sc::ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = Semaforo::State::NO_STATE;
	
	clearInEvents();
	swapInEvents();
}

Semaforo::~Semaforo()
{
}

Semaforo::Pedestrian::Pedestrian(Semaforo* parent_) noexcept :
	parent(parent_)
{
}

Semaforo::Car::Car(Semaforo* parent_) noexcept :
	parent(parent_)
{
}

Semaforo::Timming::Timming(Semaforo* parent_) noexcept :
	parent(parent_)
{
}



/*! Raises the in event 'PedButton' of default interface scope. */
void Semaforo::raisePedButton() noexcept {
	PedButton_raised = true;
}


/*! Raises the in event 'OnOffButton' of default interface scope. */
void Semaforo::raiseOnOffButton() noexcept {
	OnOffButton_raised = true;
}



bool Semaforo::isActive() const noexcept
{
	return stateConfVector[0] != Semaforo::State::NO_STATE||stateConfVector[1] != Semaforo::State::NO_STATE;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
bool Semaforo::isFinal() const noexcept
{
	   return false;
}

bool Semaforo::check() const noexcept{
	if(timerService == nullptr) {
		return false;
	}
	if (this->ifaceOperationCallback == nullptr) {
		return false;
	}
	return true;
}


void Semaforo::setTimerService(sc::timer::TimerServiceInterface* timerService_) noexcept
{
	this->timerService = timerService_;
}

sc::timer::TimerServiceInterface* Semaforo::getTimerService() noexcept
{
	return timerService;
}

sc::integer Semaforo::getNumberOfParallelTimeEvents() noexcept {
	return parallelTimeEventsCount;
}

void Semaforo::raiseTimeEvent(sc::eventid evid) noexcept
{
	if (evid < timeEventsCount)
	{
		timeEvents[evid] = true;
	}
}


bool Semaforo::isStateActive(State state) const noexcept
{
	switch (state)
	{
		case Semaforo::State::SemaphoreSystem_SystemOff :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOff] >= Semaforo::State::SemaphoreSystem_SystemOff && stateConfVector[scvi_SemaphoreSystem_SystemOff] <= Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_Off);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_On :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOff_r1_Leds_On] == Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_On);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_Off :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOff_r1_Leds_Off] == Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_Off);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOn] >= Semaforo::State::SemaphoreSystem_SystemOn && stateConfVector[scvi_SemaphoreSystem_SystemOn] <= Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_UI_ProcessInput :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOn_UI_ProcessInput] == Semaforo::State::SemaphoreSystem_SystemOn_UI_ProcessInput);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_CarOpen] >= Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen && stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_CarOpen] <= Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On] == Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On] == Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On] == Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen] >= Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen && stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen] <= Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn] == Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red] >= Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red && stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red] <= Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn] == Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff] == Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn :
		{
			return  (stateConfVector[scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn] == Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

void Semaforo::setOperationCallback(OperationCallback* operationCallback) noexcept
{
	ifaceOperationCallback = operationCallback;
}
Semaforo::Pedestrian& Semaforo::pedestrian() noexcept
{
	return ifacePedestrian;
}
bool Semaforo::Pedestrian::getRed() const noexcept
{
	return Red
	;
}

void Semaforo::Pedestrian::setRed(bool Red_) noexcept
{
	this->Red = Red_;
}
bool Semaforo::Pedestrian::getGreen() const noexcept
{
	return Green
	;
}

void Semaforo::Pedestrian::setGreen(bool Green_) noexcept
{
	this->Green = Green_;
}
bool Semaforo::Pedestrian::getRequested() const noexcept
{
	return Requested
	;
}

void Semaforo::Pedestrian::setRequested(bool Requested_) noexcept
{
	this->Requested = Requested_;
}
Semaforo::Car& Semaforo::car() noexcept
{
	return ifaceCar;
}
bool Semaforo::Car::getRed() const noexcept
{
	return Red
	;
}

void Semaforo::Car::setRed(bool Red_) noexcept
{
	this->Red = Red_;
}
bool Semaforo::Car::getYellow() const noexcept
{
	return Yellow
	;
}

void Semaforo::Car::setYellow(bool Yellow_) noexcept
{
	this->Yellow = Yellow_;
}
bool Semaforo::Car::getGreen() const noexcept
{
	return Green
	;
}

void Semaforo::Car::setGreen(bool Green_) noexcept
{
	this->Green = Green_;
}
sc::integer Semaforo::Car::getElapsed() const noexcept
{
	return elapsed
	;
}

void Semaforo::Car::setElapsed(sc::integer elapsed_) noexcept
{
	this->elapsed = elapsed_;
}
Semaforo::Timming& Semaforo::timming() noexcept
{
	return ifaceTimming;
}
sc::integer Semaforo::Timming::getOffBlink() noexcept
{
	return OffBlink
	;
}

sc::integer Semaforo::Timming::getCarYellow() noexcept
{
	return CarYellow
	;
}

sc::integer Semaforo::Timming::getRedGuard() noexcept
{
	return RedGuard
	;
}

sc::integer Semaforo::Timming::getPedOpen() noexcept
{
	return PedOpen
	;
}

sc::integer Semaforo::Timming::getPedWarn() noexcept
{
	return PedWarn
	;
}

sc::integer Semaforo::Timming::getMinCarOpen() noexcept
{
	return MinCarOpen
	;
}


// implementations of all internal functions
void Semaforo::effect_SemaphoreSystem_SystemOn_Main_CarOpen_tr0()
{
	exseq_SemaphoreSystem_SystemOn_Main_CarOpen();
	enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_default();
}

void Semaforo::effect_SemaphoreSystem_SystemOn_Main_PedestrianOpen_tr0()
{
	exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen();
	enseq_SemaphoreSystem_SystemOn_Main_CarOpen_default();
}

/* Entry action for state 'Leds_On'. */
void Semaforo::enact_SemaphoreSystem_SystemOff_r1_Leds_On()
{
	/* Entry action for state 'Leds_On'. */
	timerService->setTimer(this, 0, ((static_cast<sc::time> (Semaforo::Timming::OffBlink)) * 1), false);
	ifacePedestrian.setRed(true);
	ifacePedestrian.setGreen(true);
	ifaceCar.setRed(true);
	ifaceCar.setYellow(true);
	ifaceCar.setGreen(true);
}

/* Entry action for state 'Leds_Off'. */
void Semaforo::enact_SemaphoreSystem_SystemOff_r1_Leds_Off()
{
	/* Entry action for state 'Leds_Off'. */
	timerService->setTimer(this, 1, ((static_cast<sc::time> (Semaforo::Timming::OffBlink)) * 1), false);
	ifacePedestrian.setRed(false);
	ifacePedestrian.setGreen(false);
	ifaceCar.setRed(false);
	ifaceCar.setYellow(false);
	ifaceCar.setGreen(false);
}

/* Entry action for state 'SystemOn'. */
void Semaforo::enact_SemaphoreSystem_SystemOn()
{
	/* Entry action for state 'SystemOn'. */
	ifacePedestrian.setRed(true);
	ifacePedestrian.setGreen(false);
	ifaceCar.setRed(false);
	ifaceCar.setYellow(false);
	ifaceCar.setGreen(false);
}

/* Entry action for state 'CarOpen'. */
void Semaforo::enact_SemaphoreSystem_SystemOn_Main_CarOpen()
{
	/* Entry action for state 'CarOpen'. */
	timerService->setTimer(this, 2, ((static_cast<sc::time> (1)) * 1000), true);
	ifaceCar.setElapsed(0);
}

/* Entry action for state 'Green_On'. */
void Semaforo::enact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On()
{
	/* Entry action for state 'Green_On'. */
	ifaceCar.setGreen(true);
	ifaceCar.setRed(false);
}

/* Entry action for state 'Yellow_On'. */
void Semaforo::enact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On()
{
	/* Entry action for state 'Yellow_On'. */
	timerService->setTimer(this, 3, (((static_cast<sc::time> (Semaforo::Timming::CarYellow)) * 1) * 1000), false);
	ifaceCar.setYellow(true);
}

/* Entry action for state 'Red_On'. */
void Semaforo::enact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On()
{
	/* Entry action for state 'Red_On'. */
	timerService->setTimer(this, 4, (((static_cast<sc::time> (Semaforo::Timming::RedGuard)) * 1) * 1000), false);
	ifaceCar.setRed(true);
}

/* Entry action for state 'GreenOn'. */
void Semaforo::enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn()
{
	/* Entry action for state 'GreenOn'. */
	timerService->setTimer(this, 5, (((static_cast<sc::time> (Semaforo::Timming::PedOpen)) * 1) * 1000), false);
	ifacePedestrian.setGreen(true);
	ifacePedestrian.setRed(false);
}

/* Entry action for state 'Blink_Red'. */
void Semaforo::enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red()
{
	/* Entry action for state 'Blink_Red'. */
	timerService->setTimer(this, 6, (((static_cast<sc::time> (Semaforo::Timming::PedWarn)) * 1) * 1000), false);
}

/* Entry action for state 'RedOn'. */
void Semaforo::enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn()
{
	/* Entry action for state 'RedOn'. */
	timerService->setTimer(this, 7, ((static_cast<sc::time> (Semaforo::Timming::OffBlink)) * 1), false);
	ifacePedestrian.setRed(true);
}

/* Entry action for state 'RedOff'. */
void Semaforo::enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff()
{
	/* Entry action for state 'RedOff'. */
	timerService->setTimer(this, 8, ((static_cast<sc::time> (Semaforo::Timming::OffBlink)) * 1), false);
	ifacePedestrian.setRed(false);
}

/* Entry action for state 'RedOn'. */
void Semaforo::enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn()
{
	/* Entry action for state 'RedOn'. */
	timerService->setTimer(this, 9, (((static_cast<sc::time> (Semaforo::Timming::RedGuard)) * 1) * 1000), false);
	ifacePedestrian.setRed(true);
	ifacePedestrian.setRequested(false);
}

/* Exit action for state 'Leds_On'. */
void Semaforo::exact_SemaphoreSystem_SystemOff_r1_Leds_On()
{
	/* Exit action for state 'Leds_On'. */
	timerService->unsetTimer(this, 0);
}

/* Exit action for state 'Leds_Off'. */
void Semaforo::exact_SemaphoreSystem_SystemOff_r1_Leds_Off()
{
	/* Exit action for state 'Leds_Off'. */
	timerService->unsetTimer(this, 1);
}

/* Exit action for state 'CarOpen'. */
void Semaforo::exact_SemaphoreSystem_SystemOn_Main_CarOpen()
{
	/* Exit action for state 'CarOpen'. */
	timerService->unsetTimer(this, 2);
}

/* Exit action for state 'Green_On'. */
void Semaforo::exact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On()
{
	/* Exit action for state 'Green_On'. */
	ifaceCar.setGreen(false);
}

/* Exit action for state 'Yellow_On'. */
void Semaforo::exact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On()
{
	/* Exit action for state 'Yellow_On'. */
	timerService->unsetTimer(this, 3);
	ifaceCar.setYellow(false);
}

/* Exit action for state 'Red_On'. */
void Semaforo::exact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On()
{
	/* Exit action for state 'Red_On'. */
	timerService->unsetTimer(this, 4);
}

/* Exit action for state 'GreenOn'. */
void Semaforo::exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn()
{
	/* Exit action for state 'GreenOn'. */
	timerService->unsetTimer(this, 5);
	ifacePedestrian.setGreen(false);
}

/* Exit action for state 'Blink_Red'. */
void Semaforo::exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red()
{
	/* Exit action for state 'Blink_Red'. */
	timerService->unsetTimer(this, 6);
}

/* Exit action for state 'RedOn'. */
void Semaforo::exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn()
{
	/* Exit action for state 'RedOn'. */
	timerService->unsetTimer(this, 7);
}

/* Exit action for state 'RedOff'. */
void Semaforo::exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff()
{
	/* Exit action for state 'RedOff'. */
	timerService->unsetTimer(this, 8);
}

/* Exit action for state 'RedOn'. */
void Semaforo::exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn()
{
	/* Exit action for state 'RedOn'. */
	timerService->unsetTimer(this, 9);
}

/* 'default' enter sequence for state SystemOff */
void Semaforo::enseq_SemaphoreSystem_SystemOff_default()
{
	/* 'default' enter sequence for state SystemOff */
	enseq_SemaphoreSystem_SystemOff_r1_default();
}

/* 'default' enter sequence for state Leds_On */
void Semaforo::enseq_SemaphoreSystem_SystemOff_r1_Leds_On_default()
{
	/* 'default' enter sequence for state Leds_On */
	enact_SemaphoreSystem_SystemOff_r1_Leds_On();
	stateConfVector[0] = Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_On;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Leds_Off */
void Semaforo::enseq_SemaphoreSystem_SystemOff_r1_Leds_Off_default()
{
	/* 'default' enter sequence for state Leds_Off */
	enact_SemaphoreSystem_SystemOff_r1_Leds_Off();
	stateConfVector[0] = Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_Off;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state SystemOn */
void Semaforo::enseq_SemaphoreSystem_SystemOn_default()
{
	/* 'default' enter sequence for state SystemOn */
	enact_SemaphoreSystem_SystemOn();
	enseq_SemaphoreSystem_SystemOn_UI_default();
	enseq_SemaphoreSystem_SystemOn_Main_default();
}

/* 'default' enter sequence for state ProcessInput */
void Semaforo::enseq_SemaphoreSystem_SystemOn_UI_ProcessInput_default()
{
	/* 'default' enter sequence for state ProcessInput */
	stateConfVector[0] = Semaforo::State::SemaphoreSystem_SystemOn_UI_ProcessInput;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state CarOpen */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_CarOpen_default()
{
	/* 'default' enter sequence for state CarOpen */
	enact_SemaphoreSystem_SystemOn_Main_CarOpen();
	enseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_default();
}

/* 'default' enter sequence for state Green_On */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On_default()
{
	/* 'default' enter sequence for state Green_On */
	enact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On();
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state Yellow_On */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On_default()
{
	/* 'default' enter sequence for state Yellow_On */
	enact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On();
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state Red_On */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On_default()
{
	/* 'default' enter sequence for state Red_On */
	enact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On();
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state PedestrianOpen */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_default()
{
	/* 'default' enter sequence for state PedestrianOpen */
	enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_default();
}

/* 'default' enter sequence for state GreenOn */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn_default()
{
	/* 'default' enter sequence for state GreenOn */
	enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn();
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state Blink_Red */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_default()
{
	/* 'default' enter sequence for state Blink_Red */
	enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
	enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_default();
}

/* 'default' enter sequence for state RedOn */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn_default()
{
	/* 'default' enter sequence for state RedOn */
	enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn();
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state RedOff */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff_default()
{
	/* 'default' enter sequence for state RedOff */
	enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff();
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state RedOn */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn_default()
{
	/* 'default' enter sequence for state RedOn */
	enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn();
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for region SemaphoreSystem */
void Semaforo::enseq_SemaphoreSystem_default()
{
	/* 'default' enter sequence for region SemaphoreSystem */
	react_SemaphoreSystem__entry_Default();
}

/* 'default' enter sequence for region r1 */
void Semaforo::enseq_SemaphoreSystem_SystemOff_r1_default()
{
	/* 'default' enter sequence for region r1 */
	react_SemaphoreSystem_SystemOff_r1__entry_Default();
}

/* 'default' enter sequence for region UI */
void Semaforo::enseq_SemaphoreSystem_SystemOn_UI_default()
{
	/* 'default' enter sequence for region UI */
	react_SemaphoreSystem_SystemOn_UI__entry_Default();
}

/* 'default' enter sequence for region Main */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_default()
{
	/* 'default' enter sequence for region Main */
	react_SemaphoreSystem_SystemOn_Main__entry_Default();
}

/* 'default' enter sequence for region r1 */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_default()
{
	/* 'default' enter sequence for region r1 */
	react_SemaphoreSystem_SystemOn_Main_CarOpen_r1__entry_Default();
}

/* 'default' enter sequence for region r1 */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_default()
{
	/* 'default' enter sequence for region r1 */
	react_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1__entry_Default();
}

/* 'default' enter sequence for region r1 */
void Semaforo::enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_default()
{
	/* 'default' enter sequence for region r1 */
	react_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1__entry_Default();
}

/* Default exit sequence for state SystemOff */
void Semaforo::exseq_SemaphoreSystem_SystemOff()
{
	/* Default exit sequence for state SystemOff */
	exseq_SemaphoreSystem_SystemOff_r1();
	stateConfVector[0] = Semaforo::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Leds_On */
void Semaforo::exseq_SemaphoreSystem_SystemOff_r1_Leds_On()
{
	/* Default exit sequence for state Leds_On */
	stateConfVector[0] = Semaforo::State::SemaphoreSystem_SystemOff;
	stateConfVectorPosition = 0;
	exact_SemaphoreSystem_SystemOff_r1_Leds_On();
}

/* Default exit sequence for state Leds_Off */
void Semaforo::exseq_SemaphoreSystem_SystemOff_r1_Leds_Off()
{
	/* Default exit sequence for state Leds_Off */
	stateConfVector[0] = Semaforo::State::SemaphoreSystem_SystemOff;
	stateConfVectorPosition = 0;
	exact_SemaphoreSystem_SystemOff_r1_Leds_Off();
}

/* Default exit sequence for state SystemOn */
void Semaforo::exseq_SemaphoreSystem_SystemOn()
{
	/* Default exit sequence for state SystemOn */
	exseq_SemaphoreSystem_SystemOn_UI();
	exseq_SemaphoreSystem_SystemOn_Main();
	stateConfVector[0] = Semaforo::State::NO_STATE;
	stateConfVector[1] = Semaforo::State::NO_STATE;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state ProcessInput */
void Semaforo::exseq_SemaphoreSystem_SystemOn_UI_ProcessInput()
{
	/* Default exit sequence for state ProcessInput */
	stateConfVector[0] = Semaforo::State::SemaphoreSystem_SystemOn;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state CarOpen */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_CarOpen()
{
	/* Default exit sequence for state CarOpen */
	exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1();
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn;
	stateConfVectorPosition = 1;
	exact_SemaphoreSystem_SystemOn_Main_CarOpen();
}

/* Default exit sequence for state Green_On */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On()
{
	/* Default exit sequence for state Green_On */
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen;
	stateConfVectorPosition = 1;
	exact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On();
}

/* Default exit sequence for state Yellow_On */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On()
{
	/* Default exit sequence for state Yellow_On */
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen;
	stateConfVectorPosition = 1;
	exact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On();
}

/* Default exit sequence for state Red_On */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On()
{
	/* Default exit sequence for state Red_On */
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen;
	stateConfVectorPosition = 1;
	exact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On();
}

/* Default exit sequence for state PedestrianOpen */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen()
{
	/* Default exit sequence for state PedestrianOpen */
	exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1();
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state GreenOn */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn()
{
	/* Default exit sequence for state GreenOn */
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen;
	stateConfVectorPosition = 1;
	exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn();
}

/* Default exit sequence for state Blink_Red */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red()
{
	/* Default exit sequence for state Blink_Red */
	exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1();
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen;
	stateConfVectorPosition = 1;
	exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
}

/* Default exit sequence for state RedOn */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn()
{
	/* Default exit sequence for state RedOn */
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red;
	stateConfVectorPosition = 1;
	exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn();
}

/* Default exit sequence for state RedOff */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff()
{
	/* Default exit sequence for state RedOff */
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red;
	stateConfVectorPosition = 1;
	exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff();
}

/* Default exit sequence for state RedOn */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn()
{
	/* Default exit sequence for state RedOn */
	stateConfVector[1] = Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen;
	stateConfVectorPosition = 1;
	exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn();
}

/* Default exit sequence for region SemaphoreSystem */
void Semaforo::exseq_SemaphoreSystem()
{
	/* Default exit sequence for region SemaphoreSystem */
	/* Handle exit of all possible states (of semaforo.SemaphoreSystem) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case Semaforo::State::SemaphoreSystem_SystemOff :
		{
			exseq_SemaphoreSystem_SystemOff();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_On :
		{
			exseq_SemaphoreSystem_SystemOff_r1_Leds_On();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_Off :
		{
			exseq_SemaphoreSystem_SystemOff_r1_Leds_Off();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_UI_ProcessInput :
		{
			exseq_SemaphoreSystem_SystemOn_UI_ProcessInput();
			break;
		}
		default:
			/* do nothing */
			break;
	}
	/* Handle exit of all possible states (of semaforo.SemaphoreSystem) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen :
		{
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On :
		{
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On();
			exact_SemaphoreSystem_SystemOn_Main_CarOpen();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On :
		{
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On();
			exact_SemaphoreSystem_SystemOn_Main_CarOpen();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On :
		{
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On();
			exact_SemaphoreSystem_SystemOn_Main_CarOpen();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn();
			exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff();
			exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region r1 */
void Semaforo::exseq_SemaphoreSystem_SystemOff_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of semaforo.SemaphoreSystem.SystemOff.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_On :
		{
			exseq_SemaphoreSystem_SystemOff_r1_Leds_On();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_Off :
		{
			exseq_SemaphoreSystem_SystemOff_r1_Leds_Off();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region UI */
void Semaforo::exseq_SemaphoreSystem_SystemOn_UI()
{
	/* Default exit sequence for region UI */
	/* Handle exit of all possible states (of semaforo.SemaphoreSystem.SystemOn.UI) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case Semaforo::State::SemaphoreSystem_SystemOn_UI_ProcessInput :
		{
			exseq_SemaphoreSystem_SystemOn_UI_ProcessInput();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Main */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main()
{
	/* Default exit sequence for region Main */
	/* Handle exit of all possible states (of semaforo.SemaphoreSystem.SystemOn.Main) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen :
		{
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On :
		{
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On();
			exact_SemaphoreSystem_SystemOn_Main_CarOpen();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On :
		{
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On();
			exact_SemaphoreSystem_SystemOn_Main_CarOpen();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On :
		{
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On();
			exact_SemaphoreSystem_SystemOn_Main_CarOpen();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn();
			exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff();
			exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region r1 */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of semaforo.SemaphoreSystem.SystemOn.Main.CarOpen.r1) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On :
		{
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On :
		{
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On :
		{
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region r1 */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of semaforo.SemaphoreSystem.SystemOn.Main.PedestrianOpen.r1) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn();
			exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff();
			exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region r1 */
void Semaforo::exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of semaforo.SemaphoreSystem.SystemOn.Main.PedestrianOpen.r1.Blink_Red.r1) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn();
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff :
		{
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default react sequence for initial entry  */
void Semaforo::react_SemaphoreSystem__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_SemaphoreSystem_SystemOff_default();
}

/* Default react sequence for initial entry  */
void Semaforo::react_SemaphoreSystem_SystemOff_r1__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_SemaphoreSystem_SystemOff_r1_Leds_On_default();
}

/* Default react sequence for initial entry  */
void Semaforo::react_SemaphoreSystem_SystemOn_UI__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_SemaphoreSystem_SystemOn_UI_ProcessInput_default();
}

/* Default react sequence for initial entry  */
void Semaforo::react_SemaphoreSystem_SystemOn_Main__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_SemaphoreSystem_SystemOn_Main_CarOpen_default();
}

/* Default react sequence for initial entry  */
void Semaforo::react_SemaphoreSystem_SystemOn_Main_CarOpen_r1__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On_default();
}

/* Default react sequence for initial entry  */
void Semaforo::react_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn_default();
}

/* Default react sequence for initial entry  */
void Semaforo::react_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn_default();
}

/* The reactions of exit open_pedestrian. */
void Semaforo::react_SemaphoreSystem_SystemOn_Main_CarOpen_r1_open_pedestrian()
{
	/* The reactions of exit open_pedestrian. */
	effect_SemaphoreSystem_SystemOn_Main_CarOpen_tr0();
}

/* The reactions of exit open_car. */
void Semaforo::react_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_open_car()
{
	/* The reactions of exit open_car. */
	effect_SemaphoreSystem_SystemOn_Main_PedestrianOpen_tr0();
}

sc::integer Semaforo::react(const sc::integer transitioned_before) {
	/* State machine reactions. */
	if (current.timeEvents.semaforo_time_event_0_raised)
	{ 
		ifaceOperationCallback->synchronize();
	} 
	return transitioned_before;
}

sc::integer Semaforo::SemaphoreSystem_SystemOff_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemOff. */
	sc::integer transitioned_after = react(transitioned_before);
	if ((transitioned_after) < (0))
	{ 
		if (current.iface.OnOffButton_raised)
		{ 
			exseq_SemaphoreSystem_SystemOff();
			enseq_SemaphoreSystem_SystemOn_default();
			transitioned_after = 0;
		} 
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOff_r1_Leds_On_react(const sc::integer transitioned_before) {
	/* The reactions of state Leds_On. */
	sc::integer transitioned_after = SemaphoreSystem_SystemOff_react(transitioned_before);
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.semaforo_SemaphoreSystem_SystemOff_r1_Leds_On_time_event_0_raised)
		{ 
			exseq_SemaphoreSystem_SystemOff_r1_Leds_On();
			current.timeEvents.semaforo_SemaphoreSystem_SystemOff_r1_Leds_On_time_event_0_raised = false;
			enseq_SemaphoreSystem_SystemOff_r1_Leds_Off_default();
			transitioned_after = 0;
		} 
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOff_r1_Leds_Off_react(const sc::integer transitioned_before) {
	/* The reactions of state Leds_Off. */
	sc::integer transitioned_after = SemaphoreSystem_SystemOff_react(transitioned_before);
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.semaforo_SemaphoreSystem_SystemOff_r1_Leds_Off_time_event_0_raised)
		{ 
			exseq_SemaphoreSystem_SystemOff_r1_Leds_Off();
			current.timeEvents.semaforo_SemaphoreSystem_SystemOff_r1_Leds_Off_time_event_0_raised = false;
			enseq_SemaphoreSystem_SystemOff_r1_Leds_On_default();
			transitioned_after = 0;
		} 
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOn_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemOn. */
	sc::integer transitioned_after = react(transitioned_before);
	if ((transitioned_after) < (0))
	{ 
		if (current.iface.OnOffButton_raised)
		{ 
			exseq_SemaphoreSystem_SystemOn();
			enseq_SemaphoreSystem_SystemOff_default();
			transitioned_after = 1;
		} 
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOn_UI_ProcessInput_react(const sc::integer transitioned_before) {
	/* The reactions of state ProcessInput. */
	sc::integer transitioned_after = SemaphoreSystem_SystemOn_react(transitioned_before);
	if ((transitioned_after) < (0))
	{ 
		if (current.iface.PedButton_raised)
		{ 
			exseq_SemaphoreSystem_SystemOn_UI_ProcessInput();
			ifacePedestrian.setRequested(true);
			enseq_SemaphoreSystem_SystemOn_UI_ProcessInput_default();
			transitioned_after = 0;
		} 
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOn_Main_CarOpen_react(const sc::integer transitioned_before) {
	/* The reactions of state CarOpen. */
	sc::integer transitioned_after = transitioned_before;
	/* Always execute local reactions. */
	if (current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_CarOpen_time_event_0_raised)
	{ 
		ifaceCar.setElapsed(ifaceCar.elapsed + 1);
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On_react(const sc::integer transitioned_before) {
	/* The reactions of state Green_On. */
	sc::integer transitioned_after = SemaphoreSystem_SystemOn_Main_CarOpen_react(transitioned_before);
	if ((transitioned_after) < (1))
	{ 
		if ((ifacePedestrian.Requested) && ((ifaceCar.elapsed) >= (Semaforo::Timming::MinCarOpen)))
		{ 
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On();
			enseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On_default();
			transitioned_after = 1;
		} 
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On_react(const sc::integer transitioned_before) {
	/* The reactions of state Yellow_On. */
	sc::integer transitioned_after = SemaphoreSystem_SystemOn_Main_CarOpen_react(transitioned_before);
	if ((transitioned_after) < (1))
	{ 
		if (current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On_time_event_0_raised)
		{ 
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On();
			current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On_time_event_0_raised = false;
			enseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On_default();
			transitioned_after = 1;
		} 
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On_react(const sc::integer transitioned_before) {
	/* The reactions of state Red_On. */
	sc::integer transitioned_after = SemaphoreSystem_SystemOn_Main_CarOpen_react(transitioned_before);
	if ((transitioned_after) < (1))
	{ 
		if (current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On_time_event_0_raised)
		{ 
			exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On();
			current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On_time_event_0_raised = false;
			react_SemaphoreSystem_SystemOn_Main_CarOpen_r1_open_pedestrian();
			transitioned_after = 1;
		} 
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn_react(const sc::integer transitioned_before) {
	/* The reactions of state GreenOn. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn_time_event_0_raised)
		{ 
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn();
			current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn_time_event_0_raised = false;
			enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_default();
			transitioned_after = 1;
		} 
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_react(const sc::integer transitioned_before) {
	/* The reactions of state Blink_Red. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_time_event_0_raised)
		{ 
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
			current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_time_event_0_raised = false;
			enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn_default();
			transitioned_after = 1;
		} 
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn_react(const sc::integer transitioned_before) {
	/* The reactions of state RedOn. */
	sc::integer transitioned_after = SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_react(transitioned_before);
	if ((transitioned_after) < (1))
	{ 
		if (current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn_time_event_0_raised)
		{ 
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn();
			current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn_time_event_0_raised = false;
			enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff_default();
			transitioned_after = 1;
		} 
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff_react(const sc::integer transitioned_before) {
	/* The reactions of state RedOff. */
	sc::integer transitioned_after = SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_react(transitioned_before);
	if ((transitioned_after) < (1))
	{ 
		if (current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff_time_event_0_raised)
		{ 
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff();
			current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff_time_event_0_raised = false;
			enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn_default();
			transitioned_after = 1;
		} 
	} 
	return transitioned_after;
}

sc::integer Semaforo::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn_react(const sc::integer transitioned_before) {
	/* The reactions of state RedOn. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn_time_event_0_raised)
		{ 
			exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn();
			current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn_time_event_0_raised = false;
			react_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_open_car();
			transitioned_after = 1;
		} 
	} 
	return transitioned_after;
}

void Semaforo::swapInEvents() noexcept {
	current.iface.PedButton_raised = PedButton_raised;
	PedButton_raised = false;
	current.iface.OnOffButton_raised = OnOffButton_raised;
	OnOffButton_raised = false;
	current.timeEvents.semaforo_SemaphoreSystem_SystemOff_r1_Leds_On_time_event_0_raised = timeEvents[0];
	timeEvents[0] = false;
	current.timeEvents.semaforo_SemaphoreSystem_SystemOff_r1_Leds_Off_time_event_0_raised = timeEvents[1];
	timeEvents[1] = false;
	current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_CarOpen_time_event_0_raised = timeEvents[2];
	timeEvents[2] = false;
	current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On_time_event_0_raised = timeEvents[3];
	timeEvents[3] = false;
	current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On_time_event_0_raised = timeEvents[4];
	timeEvents[4] = false;
	current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn_time_event_0_raised = timeEvents[5];
	timeEvents[5] = false;
	current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_time_event_0_raised = timeEvents[6];
	timeEvents[6] = false;
	current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn_time_event_0_raised = timeEvents[7];
	timeEvents[7] = false;
	current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff_time_event_0_raised = timeEvents[8];
	timeEvents[8] = false;
	current.timeEvents.semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn_time_event_0_raised = timeEvents[9];
	timeEvents[9] = false;
	current.timeEvents.semaforo_time_event_0_raised = timeEvents[10];
	timeEvents[10] = false;
}

void Semaforo::clearInEvents() noexcept {
	PedButton_raised = false;
	OnOffButton_raised = false;
	timeEvents[0] = false;
	timeEvents[1] = false;
	timeEvents[2] = false;
	timeEvents[3] = false;
	timeEvents[4] = false;
	timeEvents[5] = false;
	timeEvents[6] = false;
	timeEvents[7] = false;
	timeEvents[8] = false;
	timeEvents[9] = false;
	timeEvents[10] = false;
}

void Semaforo::microStep() {
	sc::integer transitioned = -1;
	stateConfVectorPosition = 0;
	switch(stateConfVector[ 0 ])
	{
		case Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_On :
		{
			transitioned = SemaphoreSystem_SystemOff_r1_Leds_On_react(transitioned);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOff_r1_Leds_Off :
		{
			transitioned = SemaphoreSystem_SystemOff_r1_Leds_Off_react(transitioned);
			break;
		}
		case Semaforo::State::SemaphoreSystem_SystemOn_UI_ProcessInput :
		{
			transitioned = SemaphoreSystem_SystemOn_UI_ProcessInput_react(transitioned);
			break;
		}
		default:
			/* do nothing */
			break;
	}
	if ((stateConfVectorPosition) < (1))
	{ 
		switch(stateConfVector[ 1 ])
		{
			case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On :
			{
				SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On_react(transitioned);
				break;
			}
			case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On :
			{
				SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On_react(transitioned);
				break;
			}
			case Semaforo::State::SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On :
			{
				SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On_react(transitioned);
				break;
			}
			case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn :
			{
				SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn_react(transitioned);
				break;
			}
			case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn :
			{
				SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn_react(transitioned);
				break;
			}
			case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff :
			{
				SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff_react(transitioned);
				break;
			}
			case Semaforo::State::SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn :
			{
				SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
}

void Semaforo::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	swapInEvents();
	microStep();
	isExecuting = false;
}

void Semaforo::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart semaforo */
	/* Entry action for statechart 'semaforo'. */
	timerService->setTimer(this, 10, (static_cast<sc::time> (200)), true);
	enseq_SemaphoreSystem_default();
	isExecuting = false;
}

void Semaforo::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart semaforo */
	exseq_SemaphoreSystem();
	stateConfVector[0] = Semaforo::State::NO_STATE;
	stateConfVectorPosition = 0;
	/* Exit action for state 'semaforo'. */
	timerService->unsetTimer(this, 10);
	isExecuting = false;
}



