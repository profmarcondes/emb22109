/* Generated by itemis CREATE code generator. */

#ifndef SEMAFORO_H_
#define SEMAFORO_H_

/*!
Forward declaration for the Semaforo state machine.
*/
class Semaforo;


#include "sc_types.h"
#include "sc_statemachine.h"
#include "sc_cyclebased.h"
#include "sc_timer.h"
#include <string.h>

/*! \file
Header of the state machine 'semaforo'.
*/


class Semaforo : public sc::timer::TimedInterface, public sc::CycleBasedInterface
{
	public:
		Semaforo() noexcept;
		
		virtual ~Semaforo();
		
		
		
		/*! Enumeration of all states. */
		enum class State
		{
			NO_STATE,
			SemaphoreSystem_SystemOff,
			SemaphoreSystem_SystemOff_r1_Leds_On,
			SemaphoreSystem_SystemOff_r1_Leds_Off,
			SemaphoreSystem_SystemOn,
			SemaphoreSystem_SystemOn_UI_ProcessInput,
			SemaphoreSystem_SystemOn_Main_CarOpen,
			SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On,
			SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On,
			SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On,
			SemaphoreSystem_SystemOn_Main_PedestrianOpen,
			SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn,
			SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red,
			SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn,
			SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff,
			SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn
		};
		
		/*! The number of states. */
		static constexpr const sc::integer numStates {15};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOff {0};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOff_r1_Leds_On {0};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOff_r1_Leds_Off {0};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOn {0};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOn_UI_ProcessInput {0};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOn_Main_CarOpen {1};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On {1};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On {1};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On {1};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen {1};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn {1};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red {1};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn {1};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff {1};
		static constexpr const sc::integer scvi_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn {1};
		/*! Raises the in event 'PedButton' of default interface scope. */
		void raisePedButton() noexcept;
		/*! Raises the in event 'OnOffButton' of default interface scope. */
		void raiseOnOffButton() noexcept;
		
		
		//! Inner class for default interface scope operation callbacks.
		class OperationCallback
		{
			public:
				virtual ~OperationCallback() = 0;
				
				virtual void synchronize() = 0;
				
				
		};
		
		/*! Set the working instance of the operation callback interface 'OperationCallback'. */
		void setOperationCallback(OperationCallback* operationCallback) noexcept;
		//! Inner class for Pedestrian interface scope.
		class Pedestrian
		{
			public:
				explicit Pedestrian(Semaforo* parent) noexcept;
				
				
				
				
				/*! Gets the value of the variable 'Red' that is defined in the interface scope 'Pedestrian'. */
				bool getRed() const noexcept;
				
				/*! Sets the value of the variable 'Red' that is defined in the interface scope 'Pedestrian'. */
				void setRed(bool Red) noexcept;
				
				/*! Gets the value of the variable 'Green' that is defined in the interface scope 'Pedestrian'. */
				bool getGreen() const noexcept;
				
				/*! Sets the value of the variable 'Green' that is defined in the interface scope 'Pedestrian'. */
				void setGreen(bool Green) noexcept;
				
				/*! Gets the value of the variable 'Requested' that is defined in the interface scope 'Pedestrian'. */
				bool getRequested() const noexcept;
				
				/*! Sets the value of the variable 'Requested' that is defined in the interface scope 'Pedestrian'. */
				void setRequested(bool Requested) noexcept;
				
				
				
				
			private:
				friend class Semaforo;
				
				bool Red {false};
				bool Green {false};
				bool Requested {false};
				
				
				Semaforo* parent;
				
				
				
				
				
		};
		
		/*! Returns an instance of the interface class 'Pedestrian'. */
		Pedestrian& pedestrian() noexcept;
		
		//! Inner class for Car interface scope.
		class Car
		{
			public:
				explicit Car(Semaforo* parent) noexcept;
				
				
				
				
				
				/*! Gets the value of the variable 'Red' that is defined in the interface scope 'Car'. */
				bool getRed() const noexcept;
				
				/*! Sets the value of the variable 'Red' that is defined in the interface scope 'Car'. */
				void setRed(bool Red) noexcept;
				
				/*! Gets the value of the variable 'Yellow' that is defined in the interface scope 'Car'. */
				bool getYellow() const noexcept;
				
				/*! Sets the value of the variable 'Yellow' that is defined in the interface scope 'Car'. */
				void setYellow(bool Yellow) noexcept;
				
				/*! Gets the value of the variable 'Green' that is defined in the interface scope 'Car'. */
				bool getGreen() const noexcept;
				
				/*! Sets the value of the variable 'Green' that is defined in the interface scope 'Car'. */
				void setGreen(bool Green) noexcept;
				
				/*! Gets the value of the variable 'elapsed' that is defined in the interface scope 'Car'. */
				sc::integer getElapsed() const noexcept;
				
				/*! Sets the value of the variable 'elapsed' that is defined in the interface scope 'Car'. */
				void setElapsed(sc::integer elapsed) noexcept;
				
				
				
				
			private:
				friend class Semaforo;
				
				bool Red {false};
				bool Yellow {false};
				bool Green {false};
				sc::integer elapsed {0};
				
				
				Semaforo* parent;
				
				
				
				
				
		};
		
		/*! Returns an instance of the interface class 'Car'. */
		Car& car() noexcept;
		
		//! Inner class for Timming interface scope.
		class Timming
		{
			public:
				explicit Timming(Semaforo* parent) noexcept;
				
				
				
				
				
				
				
				/*! Gets the value of the variable 'OffBlink' that is defined in the interface scope 'Timming'. */
				static sc::integer getOffBlink()  noexcept;
				
				/*! Gets the value of the variable 'CarYellow' that is defined in the interface scope 'Timming'. */
				static sc::integer getCarYellow()  noexcept;
				
				/*! Gets the value of the variable 'RedGuard' that is defined in the interface scope 'Timming'. */
				static sc::integer getRedGuard()  noexcept;
				
				/*! Gets the value of the variable 'PedOpen' that is defined in the interface scope 'Timming'. */
				static sc::integer getPedOpen()  noexcept;
				
				/*! Gets the value of the variable 'PedWarn' that is defined in the interface scope 'Timming'. */
				static sc::integer getPedWarn()  noexcept;
				
				/*! Gets the value of the variable 'MinCarOpen' that is defined in the interface scope 'Timming'. */
				static sc::integer getMinCarOpen()  noexcept;
				
				
				
				
			private:
				friend class Semaforo;
				
				static constexpr const sc::integer OffBlink {1000};
				static constexpr const sc::integer CarYellow {1};
				static constexpr const sc::integer RedGuard {1};
				static constexpr const sc::integer PedOpen {10};
				static constexpr const sc::integer PedWarn {5};
				static constexpr const sc::integer MinCarOpen {20};
				
				
				Semaforo* parent;
				
				
				
				
				
		};
		
		/*! Returns an instance of the interface class 'Timming'. */
		Timming& timming() noexcept;
		
		
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		 void enter() override;
		
		 void exit() override;
		
		void runCycle() override;
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		 bool isActive() const noexcept override;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		 bool isFinal() const noexcept override;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		bool check() const noexcept;
		
		/*
		 * Functions inherited from TimedStatemachineInterface
		 */
		void setTimerService(sc::timer::TimerServiceInterface* timerService_) noexcept override;
		
		sc::timer::TimerServiceInterface* getTimerService() noexcept override;
		
		void raiseTimeEvent(sc::eventid event) noexcept override;
		
		sc::integer getNumberOfParallelTimeEvents() noexcept override;
		
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		bool isStateActive(State state) const noexcept;
		
		//! number of time events used by the state machine.
		static const sc::integer timeEventsCount {11};
		
		//! number of time events that can be active at once.
		static const sc::integer parallelTimeEventsCount {3};
		
		
	protected:
		
		
		
		
	private:
		Semaforo(const Semaforo &rhs);
		Semaforo& operator=(const Semaforo&);
		
		
		
		
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc::ushort maxOrthogonalStates {2};
		
		sc::timer::TimerServiceInterface* timerService;
		bool timeEvents[timeEventsCount];
		
		
		State stateConfVector[maxOrthogonalStates];
		
		
		Pedestrian ifacePedestrian {Pedestrian{nullptr}};
		Car ifaceCar {Car{nullptr}};
		Timming ifaceTimming {Timming{nullptr}};
		
		OperationCallback* ifaceOperationCallback;
		
		typedef struct {
			bool PedButton_raised;
			bool OnOffButton_raised;
		}semaforoIfaceEvBuf;
		typedef struct {
			bool semaforo_SemaphoreSystem_SystemOff_r1_Leds_On_time_event_0_raised;
			bool semaforo_SemaphoreSystem_SystemOff_r1_Leds_Off_time_event_0_raised;
			bool semaforo_SemaphoreSystem_SystemOn_Main_CarOpen_time_event_0_raised;
			bool semaforo_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On_time_event_0_raised;
			bool semaforo_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On_time_event_0_raised;
			bool semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn_time_event_0_raised;
			bool semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_time_event_0_raised;
			bool semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn_time_event_0_raised;
			bool semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff_time_event_0_raised;
			bool semaforo_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn_time_event_0_raised;
			bool semaforo_time_event_0_raised;
		}semaforoTimeEventsEvBuf;
		typedef struct {
			semaforoIfaceEvBuf iface;
			semaforoTimeEventsEvBuf timeEvents;
		}semaforoEvBuf;
		semaforoEvBuf current {};
		bool isExecuting {false};
		sc::integer stateConfVectorPosition {0};
		
		
		
		// prototypes of all internal functions
		
		void effect_SemaphoreSystem_SystemOn_Main_CarOpen_tr0();
		void effect_SemaphoreSystem_SystemOn_Main_PedestrianOpen_tr0();
		void enact_SemaphoreSystem_SystemOff_r1_Leds_On();
		void enact_SemaphoreSystem_SystemOff_r1_Leds_Off();
		void enact_SemaphoreSystem_SystemOn();
		void enact_SemaphoreSystem_SystemOn_Main_CarOpen();
		void enact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On();
		void enact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On();
		void enact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On();
		void enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn();
		void enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
		void enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn();
		void enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff();
		void enact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn();
		void exact_SemaphoreSystem_SystemOff_r1_Leds_On();
		void exact_SemaphoreSystem_SystemOff_r1_Leds_Off();
		void exact_SemaphoreSystem_SystemOn_Main_CarOpen();
		void exact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On();
		void exact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On();
		void exact_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On();
		void exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn();
		void exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
		void exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn();
		void exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff();
		void exact_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn();
		void enseq_SemaphoreSystem_SystemOff_default();
		void enseq_SemaphoreSystem_SystemOff_r1_Leds_On_default();
		void enseq_SemaphoreSystem_SystemOff_r1_Leds_Off_default();
		void enseq_SemaphoreSystem_SystemOn_default();
		void enseq_SemaphoreSystem_SystemOn_UI_ProcessInput_default();
		void enseq_SemaphoreSystem_SystemOn_Main_CarOpen_default();
		void enseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On_default();
		void enseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On_default();
		void enseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On_default();
		void enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_default();
		void enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn_default();
		void enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_default();
		void enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn_default();
		void enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff_default();
		void enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn_default();
		void enseq_SemaphoreSystem_default();
		void enseq_SemaphoreSystem_SystemOff_r1_default();
		void enseq_SemaphoreSystem_SystemOn_UI_default();
		void enseq_SemaphoreSystem_SystemOn_Main_default();
		void enseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_default();
		void enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_default();
		void enseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_default();
		void exseq_SemaphoreSystem_SystemOff();
		void exseq_SemaphoreSystem_SystemOff_r1_Leds_On();
		void exseq_SemaphoreSystem_SystemOff_r1_Leds_Off();
		void exseq_SemaphoreSystem_SystemOn();
		void exseq_SemaphoreSystem_SystemOn_UI_ProcessInput();
		void exseq_SemaphoreSystem_SystemOn_Main_CarOpen();
		void exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On();
		void exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On();
		void exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On();
		void exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen();
		void exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn();
		void exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red();
		void exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn();
		void exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff();
		void exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn();
		void exseq_SemaphoreSystem();
		void exseq_SemaphoreSystem_SystemOff_r1();
		void exseq_SemaphoreSystem_SystemOn_UI();
		void exseq_SemaphoreSystem_SystemOn_Main();
		void exseq_SemaphoreSystem_SystemOn_Main_CarOpen_r1();
		void exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1();
		void exseq_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1();
		void react_SemaphoreSystem__entry_Default();
		void react_SemaphoreSystem_SystemOff_r1__entry_Default();
		void react_SemaphoreSystem_SystemOn_UI__entry_Default();
		void react_SemaphoreSystem_SystemOn_Main__entry_Default();
		void react_SemaphoreSystem_SystemOn_Main_CarOpen_r1__entry_Default();
		void react_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1__entry_Default();
		void react_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1__entry_Default();
		void react_SemaphoreSystem_SystemOn_Main_CarOpen_r1_open_pedestrian();
		void react_SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_open_car();
		sc::integer react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOff_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOff_r1_Leds_On_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOff_r1_Leds_Off_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOn_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOn_UI_ProcessInput_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOn_Main_CarOpen_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOn_Main_CarOpen_r1_Green_On_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOn_Main_CarOpen_r1_Yellow_On_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOn_Main_CarOpen_r1_Red_On_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_GreenOn_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOn_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_Blink_Red_r1_RedOff_react(const sc::integer transitioned_before);
		sc::integer SemaphoreSystem_SystemOn_Main_PedestrianOpen_r1_RedOn_react(const sc::integer transitioned_before);
		void swapInEvents() noexcept;
		void clearInEvents() noexcept;
		void microStep();
		
		
		
		/*! Indicates event 'PedButton' of default interface scope is active. */
		bool PedButton_raised {false};
		
		/*! Indicates event 'OnOffButton' of default interface scope is active. */
		bool OnOffButton_raised {false};
		
		
		
};


inline Semaforo::OperationCallback::~OperationCallback() {}


#endif /* SEMAFORO_H_ */
