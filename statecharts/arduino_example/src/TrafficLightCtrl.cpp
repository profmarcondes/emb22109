/* Generated by itemis CREATE code generator. */

#include "TrafficLightCtrl.h"

/*! \file
Implementation of the state machine 'TrafficLightCtrl'
*/




TrafficLightCtrl::TrafficLightCtrl() noexcept
{
	this->ifaceTrafficLight.parent = this;
	this->ifacePedestrian.parent = this;
	for (sc::ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = TrafficLightCtrl::State::NO_STATE;
	
	clearInEvents();
	swapInEvents();
}

TrafficLightCtrl::~TrafficLightCtrl()
{
}

TrafficLightCtrl::TrafficLight::TrafficLight(TrafficLightCtrl* parent_) noexcept :
	parent(parent_)
{
}

TrafficLightCtrl::Pedestrian::Pedestrian(TrafficLightCtrl* parent_) noexcept :
	parent(parent_)
{
}



/*! Raises the in event 'pedestrianRequest' of default interface scope. */
void TrafficLightCtrl::raisePedestrianRequest() noexcept {
	pedestrianRequest_raised = true;
}


/*! Raises the in event 'onOff' of default interface scope. */
void TrafficLightCtrl::raiseOnOff() noexcept {
	onOff_raised = true;
}



bool TrafficLightCtrl::isActive() const noexcept
{
	return stateConfVector[0] != TrafficLightCtrl::State::NO_STATE;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
bool TrafficLightCtrl::isFinal() const noexcept
{
	   return false;
}

bool TrafficLightCtrl::check() const noexcept{
	if(timerService == nullptr) {
		return false;
	}
	if (this->ifaceOperationCallback == nullptr) {
		return false;
	}
	return true;
}


void TrafficLightCtrl::setTimerService(sc::timer::TimerServiceInterface* timerService_) noexcept
{
	this->timerService = timerService_;
}

sc::timer::TimerServiceInterface* TrafficLightCtrl::getTimerService() noexcept
{
	return timerService;
}

sc::integer TrafficLightCtrl::getNumberOfParallelTimeEvents() noexcept {
	return parallelTimeEventsCount;
}

void TrafficLightCtrl::raiseTimeEvent(sc::eventid evid) noexcept
{
	if (evid < timeEventsCount)
	{
		timeEvents[evid] = true;
	}
}


bool TrafficLightCtrl::isStateActive(State state) const noexcept
{
	switch (state)
	{
		case TrafficLightCtrl::State::main_region_on :
		{
			return  (stateConfVector[scvi_main_region_on] >= TrafficLightCtrl::State::main_region_on && stateConfVector[scvi_main_region_on] <= TrafficLightCtrl::State::main_region_on_r1_Safe);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetGreen :
		{
			return  (stateConfVector[scvi_main_region_on_r1_StreetGreen] == TrafficLightCtrl::State::main_region_on_r1_StreetGreen);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting :
		{
			return  (stateConfVector[scvi_main_region_on_r1_PedWaiting] >= TrafficLightCtrl::State::main_region_on_r1_PedWaiting && stateConfVector[scvi_main_region_on_r1_PedWaiting] <= TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOff);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOn :
		{
			return  (stateConfVector[scvi_main_region_on_r1_PedWaiting_r1_waitOn] == TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOn);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOff :
		{
			return  (stateConfVector[scvi_main_region_on_r1_PedWaiting_r1_waitOff] == TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOff);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetAttention :
		{
			return  (stateConfVector[scvi_main_region_on_r1_StreetAttention] == TrafficLightCtrl::State::main_region_on_r1_StreetAttention);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetRed :
		{
			return  (stateConfVector[scvi_main_region_on_r1_StreetRed] == TrafficLightCtrl::State::main_region_on_r1_StreetRed);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedestrianGreen :
		{
			return  (stateConfVector[scvi_main_region_on_r1_PedestrianGreen] == TrafficLightCtrl::State::main_region_on_r1_PedestrianGreen);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedestrianRed :
		{
			return  (stateConfVector[scvi_main_region_on_r1_PedestrianRed] == TrafficLightCtrl::State::main_region_on_r1_PedestrianRed);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetPrepare :
		{
			return  (stateConfVector[scvi_main_region_on_r1_StreetPrepare] == TrafficLightCtrl::State::main_region_on_r1_StreetPrepare);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_Safe :
		{
			return  (stateConfVector[scvi_main_region_on_r1_Safe] == TrafficLightCtrl::State::main_region_on_r1_Safe);
			break;
		}
		case TrafficLightCtrl::State::main_region_off :
		{
			return  (stateConfVector[scvi_main_region_off] >= TrafficLightCtrl::State::main_region_off && stateConfVector[scvi_main_region_off] <= TrafficLightCtrl::State::main_region_off_r1_YellowOff);
			break;
		}
		case TrafficLightCtrl::State::main_region_off_r1_YellowOn :
		{
			return  (stateConfVector[scvi_main_region_off_r1_YellowOn] == TrafficLightCtrl::State::main_region_off_r1_YellowOn);
			break;
		}
		case TrafficLightCtrl::State::main_region_off_r1_YellowOff :
		{
			return  (stateConfVector[scvi_main_region_off_r1_YellowOff] == TrafficLightCtrl::State::main_region_off_r1_YellowOff);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

TrafficLightCtrl::TrafficLight& TrafficLightCtrl::trafficLight() noexcept
{
	return ifaceTrafficLight;
}
bool TrafficLightCtrl::TrafficLight::getRed() const noexcept
{
	return red
	;
}

void TrafficLightCtrl::TrafficLight::setRed(bool red_) noexcept
{
	this->red = red_;
}
bool TrafficLightCtrl::TrafficLight::getYellow() const noexcept
{
	return yellow
	;
}

void TrafficLightCtrl::TrafficLight::setYellow(bool yellow_) noexcept
{
	this->yellow = yellow_;
}
bool TrafficLightCtrl::TrafficLight::getGreen() const noexcept
{
	return green
	;
}

void TrafficLightCtrl::TrafficLight::setGreen(bool green_) noexcept
{
	this->green = green_;
}
TrafficLightCtrl::Pedestrian& TrafficLightCtrl::pedestrian() noexcept
{
	return ifacePedestrian;
}
bool TrafficLightCtrl::Pedestrian::getRequest() const noexcept
{
	return request
	;
}

void TrafficLightCtrl::Pedestrian::setRequest(bool request_) noexcept
{
	this->request = request_;
}
bool TrafficLightCtrl::Pedestrian::getRed() const noexcept
{
	return red
	;
}

void TrafficLightCtrl::Pedestrian::setRed(bool red_) noexcept
{
	this->red = red_;
}
bool TrafficLightCtrl::Pedestrian::getGreen() const noexcept
{
	return green
	;
}

void TrafficLightCtrl::Pedestrian::setGreen(bool green_) noexcept
{
	this->green = green_;
}
void TrafficLightCtrl::setOperationCallback(OperationCallback* operationCallback) noexcept
{
	ifaceOperationCallback = operationCallback;
}

// implementations of all internal functions
/* Entry action for state 'StreetGreen'. */
void TrafficLightCtrl::enact_main_region_on_r1_StreetGreen()
{
	/* Entry action for state 'StreetGreen'. */
	ifaceTrafficLight.setRed(false);
	ifaceTrafficLight.setYellow(false);
	ifaceTrafficLight.setGreen(true);
	ifacePedestrian.setRed(true);
	ifacePedestrian.setGreen(false);
	ifacePedestrian.setRequest(false);
}

/* Entry action for state 'PedWaiting'. */
void TrafficLightCtrl::enact_main_region_on_r1_PedWaiting()
{
	/* Entry action for state 'PedWaiting'. */
	timerService->setTimer(this, 0, ((static_cast<sc::time> (7)) * 1000), false);
}

/* Entry action for state 'waitOn'. */
void TrafficLightCtrl::enact_main_region_on_r1_PedWaiting_r1_waitOn()
{
	/* Entry action for state 'waitOn'. */
	timerService->setTimer(this, 1, (static_cast<sc::time> (500)), false);
	ifacePedestrian.setRequest(true);
}

/* Entry action for state 'waitOff'. */
void TrafficLightCtrl::enact_main_region_on_r1_PedWaiting_r1_waitOff()
{
	/* Entry action for state 'waitOff'. */
	timerService->setTimer(this, 2, (static_cast<sc::time> (500)), false);
	ifacePedestrian.setRequest(false);
}

/* Entry action for state 'StreetAttention'. */
void TrafficLightCtrl::enact_main_region_on_r1_StreetAttention()
{
	/* Entry action for state 'StreetAttention'. */
	timerService->setTimer(this, 3, ((static_cast<sc::time> (2)) * 1000), false);
	ifaceTrafficLight.setRed(false);
	ifaceTrafficLight.setYellow(true);
	ifaceTrafficLight.setGreen(false);
}

/* Entry action for state 'StreetRed'. */
void TrafficLightCtrl::enact_main_region_on_r1_StreetRed()
{
	/* Entry action for state 'StreetRed'. */
	timerService->setTimer(this, 4, ((static_cast<sc::time> (2)) * 1000), false);
	ifaceTrafficLight.setRed(true);
	ifaceTrafficLight.setYellow(false);
	ifaceTrafficLight.setGreen(false);
}

/* Entry action for state 'PedestrianGreen'. */
void TrafficLightCtrl::enact_main_region_on_r1_PedestrianGreen()
{
	/* Entry action for state 'PedestrianGreen'. */
	timerService->setTimer(this, 5, ((static_cast<sc::time> (7)) * 1000), false);
	ifacePedestrian.setRed(false);
	ifacePedestrian.setGreen(true);
}

/* Entry action for state 'PedestrianRed'. */
void TrafficLightCtrl::enact_main_region_on_r1_PedestrianRed()
{
	/* Entry action for state 'PedestrianRed'. */
	timerService->setTimer(this, 6, ((static_cast<sc::time> (5)) * 1000), false);
	ifacePedestrian.setRed(true);
	ifacePedestrian.setGreen(false);
}

/* Entry action for state 'StreetPrepare'. */
void TrafficLightCtrl::enact_main_region_on_r1_StreetPrepare()
{
	/* Entry action for state 'StreetPrepare'. */
	timerService->setTimer(this, 7, ((static_cast<sc::time> (2)) * 1000), false);
	ifaceTrafficLight.setRed(true);
	ifaceTrafficLight.setYellow(true);
	ifaceTrafficLight.setGreen(false);
}

/* Entry action for state 'Safe'. */
void TrafficLightCtrl::enact_main_region_on_r1_Safe()
{
	/* Entry action for state 'Safe'. */
	timerService->setTimer(this, 8, ((static_cast<sc::time> (10)) * 1000), false);
	ifaceTrafficLight.setRed(true);
	ifaceTrafficLight.setYellow(false);
	ifaceTrafficLight.setGreen(false);
	ifacePedestrian.setRed(true);
	ifacePedestrian.setGreen(false);
	ifacePedestrian.setRequest(false);
}

/* Entry action for state 'off'. */
void TrafficLightCtrl::enact_main_region_off()
{
	/* Entry action for state 'off'. */
	ifaceTrafficLight.setRed(false);
	ifaceTrafficLight.setGreen(false);
	ifaceTrafficLight.setYellow(false);
	ifacePedestrian.setRed(false);
	ifacePedestrian.setGreen(false);
}

/* Entry action for state 'YellowOn'. */
void TrafficLightCtrl::enact_main_region_off_r1_YellowOn()
{
	/* Entry action for state 'YellowOn'. */
	timerService->setTimer(this, 9, (static_cast<sc::time> (500)), false);
	ifaceTrafficLight.setYellow(true);
	ifacePedestrian.setRequest(true);
}

/* Entry action for state 'YellowOff'. */
void TrafficLightCtrl::enact_main_region_off_r1_YellowOff()
{
	/* Entry action for state 'YellowOff'. */
	timerService->setTimer(this, 10, (static_cast<sc::time> (500)), false);
	ifaceTrafficLight.setYellow(false);
	ifacePedestrian.setRequest(false);
}

/* Exit action for state 'PedWaiting'. */
void TrafficLightCtrl::exact_main_region_on_r1_PedWaiting()
{
	/* Exit action for state 'PedWaiting'. */
	timerService->unsetTimer(this, 0);
	ifacePedestrian.setRequest(false);
}

/* Exit action for state 'waitOn'. */
void TrafficLightCtrl::exact_main_region_on_r1_PedWaiting_r1_waitOn()
{
	/* Exit action for state 'waitOn'. */
	timerService->unsetTimer(this, 1);
}

/* Exit action for state 'waitOff'. */
void TrafficLightCtrl::exact_main_region_on_r1_PedWaiting_r1_waitOff()
{
	/* Exit action for state 'waitOff'. */
	timerService->unsetTimer(this, 2);
}

/* Exit action for state 'StreetAttention'. */
void TrafficLightCtrl::exact_main_region_on_r1_StreetAttention()
{
	/* Exit action for state 'StreetAttention'. */
	timerService->unsetTimer(this, 3);
}

/* Exit action for state 'StreetRed'. */
void TrafficLightCtrl::exact_main_region_on_r1_StreetRed()
{
	/* Exit action for state 'StreetRed'. */
	timerService->unsetTimer(this, 4);
}

/* Exit action for state 'PedestrianGreen'. */
void TrafficLightCtrl::exact_main_region_on_r1_PedestrianGreen()
{
	/* Exit action for state 'PedestrianGreen'. */
	timerService->unsetTimer(this, 5);
}

/* Exit action for state 'PedestrianRed'. */
void TrafficLightCtrl::exact_main_region_on_r1_PedestrianRed()
{
	/* Exit action for state 'PedestrianRed'. */
	timerService->unsetTimer(this, 6);
}

/* Exit action for state 'StreetPrepare'. */
void TrafficLightCtrl::exact_main_region_on_r1_StreetPrepare()
{
	/* Exit action for state 'StreetPrepare'. */
	timerService->unsetTimer(this, 7);
}

/* Exit action for state 'Safe'. */
void TrafficLightCtrl::exact_main_region_on_r1_Safe()
{
	/* Exit action for state 'Safe'. */
	timerService->unsetTimer(this, 8);
}

/* Exit action for state 'YellowOn'. */
void TrafficLightCtrl::exact_main_region_off_r1_YellowOn()
{
	/* Exit action for state 'YellowOn'. */
	timerService->unsetTimer(this, 9);
}

/* Exit action for state 'YellowOff'. */
void TrafficLightCtrl::exact_main_region_off_r1_YellowOff()
{
	/* Exit action for state 'YellowOff'. */
	timerService->unsetTimer(this, 10);
}

/* 'default' enter sequence for state on */
void TrafficLightCtrl::enseq_main_region_on_default()
{
	/* 'default' enter sequence for state on */
	enseq_main_region_on_r1_default();
}

/* 'default' enter sequence for state StreetGreen */
void TrafficLightCtrl::enseq_main_region_on_r1_StreetGreen_default()
{
	/* 'default' enter sequence for state StreetGreen */
	enact_main_region_on_r1_StreetGreen();
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on_r1_StreetGreen;
}

/* 'default' enter sequence for state PedWaiting */
void TrafficLightCtrl::enseq_main_region_on_r1_PedWaiting_default()
{
	/* 'default' enter sequence for state PedWaiting */
	enact_main_region_on_r1_PedWaiting();
	enseq_main_region_on_r1_PedWaiting_r1_default();
}

/* 'default' enter sequence for state waitOn */
void TrafficLightCtrl::enseq_main_region_on_r1_PedWaiting_r1_waitOn_default()
{
	/* 'default' enter sequence for state waitOn */
	enact_main_region_on_r1_PedWaiting_r1_waitOn();
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOn;
}

/* 'default' enter sequence for state waitOff */
void TrafficLightCtrl::enseq_main_region_on_r1_PedWaiting_r1_waitOff_default()
{
	/* 'default' enter sequence for state waitOff */
	enact_main_region_on_r1_PedWaiting_r1_waitOff();
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOff;
}

/* 'default' enter sequence for state StreetAttention */
void TrafficLightCtrl::enseq_main_region_on_r1_StreetAttention_default()
{
	/* 'default' enter sequence for state StreetAttention */
	enact_main_region_on_r1_StreetAttention();
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on_r1_StreetAttention;
}

/* 'default' enter sequence for state StreetRed */
void TrafficLightCtrl::enseq_main_region_on_r1_StreetRed_default()
{
	/* 'default' enter sequence for state StreetRed */
	enact_main_region_on_r1_StreetRed();
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on_r1_StreetRed;
}

/* 'default' enter sequence for state PedestrianGreen */
void TrafficLightCtrl::enseq_main_region_on_r1_PedestrianGreen_default()
{
	/* 'default' enter sequence for state PedestrianGreen */
	enact_main_region_on_r1_PedestrianGreen();
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on_r1_PedestrianGreen;
}

/* 'default' enter sequence for state PedestrianRed */
void TrafficLightCtrl::enseq_main_region_on_r1_PedestrianRed_default()
{
	/* 'default' enter sequence for state PedestrianRed */
	enact_main_region_on_r1_PedestrianRed();
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on_r1_PedestrianRed;
}

/* 'default' enter sequence for state StreetPrepare */
void TrafficLightCtrl::enseq_main_region_on_r1_StreetPrepare_default()
{
	/* 'default' enter sequence for state StreetPrepare */
	enact_main_region_on_r1_StreetPrepare();
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on_r1_StreetPrepare;
}

/* 'default' enter sequence for state Safe */
void TrafficLightCtrl::enseq_main_region_on_r1_Safe_default()
{
	/* 'default' enter sequence for state Safe */
	enact_main_region_on_r1_Safe();
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on_r1_Safe;
}

/* 'default' enter sequence for state off */
void TrafficLightCtrl::enseq_main_region_off_default()
{
	/* 'default' enter sequence for state off */
	enact_main_region_off();
	enseq_main_region_off_r1_default();
}

/* 'default' enter sequence for state YellowOn */
void TrafficLightCtrl::enseq_main_region_off_r1_YellowOn_default()
{
	/* 'default' enter sequence for state YellowOn */
	enact_main_region_off_r1_YellowOn();
	stateConfVector[0] = TrafficLightCtrl::State::main_region_off_r1_YellowOn;
}

/* 'default' enter sequence for state YellowOff */
void TrafficLightCtrl::enseq_main_region_off_r1_YellowOff_default()
{
	/* 'default' enter sequence for state YellowOff */
	enact_main_region_off_r1_YellowOff();
	stateConfVector[0] = TrafficLightCtrl::State::main_region_off_r1_YellowOff;
}

/* 'default' enter sequence for region main region */
void TrafficLightCtrl::enseq_main_region_default()
{
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default();
}

/* 'default' enter sequence for region r1 */
void TrafficLightCtrl::enseq_main_region_on_r1_default()
{
	/* 'default' enter sequence for region r1 */
	react_main_region_on_r1__entry_Default();
}

/* 'default' enter sequence for region r1 */
void TrafficLightCtrl::enseq_main_region_on_r1_PedWaiting_r1_default()
{
	/* 'default' enter sequence for region r1 */
	react_main_region_on_r1_PedWaiting_r1__entry_Default();
}

/* 'default' enter sequence for region r1 */
void TrafficLightCtrl::enseq_main_region_off_r1_default()
{
	/* 'default' enter sequence for region r1 */
	react_main_region_off_r1__entry_Default();
}

/* Default exit sequence for state on */
void TrafficLightCtrl::exseq_main_region_on()
{
	/* Default exit sequence for state on */
	exseq_main_region_on_r1();
	stateConfVector[0] = TrafficLightCtrl::State::NO_STATE;
}

/* Default exit sequence for state StreetGreen */
void TrafficLightCtrl::exseq_main_region_on_r1_StreetGreen()
{
	/* Default exit sequence for state StreetGreen */
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on;
}

/* Default exit sequence for state PedWaiting */
void TrafficLightCtrl::exseq_main_region_on_r1_PedWaiting()
{
	/* Default exit sequence for state PedWaiting */
	exseq_main_region_on_r1_PedWaiting_r1();
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on;
	exact_main_region_on_r1_PedWaiting();
}

/* Default exit sequence for state waitOn */
void TrafficLightCtrl::exseq_main_region_on_r1_PedWaiting_r1_waitOn()
{
	/* Default exit sequence for state waitOn */
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on_r1_PedWaiting;
	exact_main_region_on_r1_PedWaiting_r1_waitOn();
}

/* Default exit sequence for state waitOff */
void TrafficLightCtrl::exseq_main_region_on_r1_PedWaiting_r1_waitOff()
{
	/* Default exit sequence for state waitOff */
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on_r1_PedWaiting;
	exact_main_region_on_r1_PedWaiting_r1_waitOff();
}

/* Default exit sequence for state StreetAttention */
void TrafficLightCtrl::exseq_main_region_on_r1_StreetAttention()
{
	/* Default exit sequence for state StreetAttention */
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on;
	exact_main_region_on_r1_StreetAttention();
}

/* Default exit sequence for state StreetRed */
void TrafficLightCtrl::exseq_main_region_on_r1_StreetRed()
{
	/* Default exit sequence for state StreetRed */
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on;
	exact_main_region_on_r1_StreetRed();
}

/* Default exit sequence for state PedestrianGreen */
void TrafficLightCtrl::exseq_main_region_on_r1_PedestrianGreen()
{
	/* Default exit sequence for state PedestrianGreen */
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on;
	exact_main_region_on_r1_PedestrianGreen();
}

/* Default exit sequence for state PedestrianRed */
void TrafficLightCtrl::exseq_main_region_on_r1_PedestrianRed()
{
	/* Default exit sequence for state PedestrianRed */
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on;
	exact_main_region_on_r1_PedestrianRed();
}

/* Default exit sequence for state StreetPrepare */
void TrafficLightCtrl::exseq_main_region_on_r1_StreetPrepare()
{
	/* Default exit sequence for state StreetPrepare */
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on;
	exact_main_region_on_r1_StreetPrepare();
}

/* Default exit sequence for state Safe */
void TrafficLightCtrl::exseq_main_region_on_r1_Safe()
{
	/* Default exit sequence for state Safe */
	stateConfVector[0] = TrafficLightCtrl::State::main_region_on;
	exact_main_region_on_r1_Safe();
}

/* Default exit sequence for state off */
void TrafficLightCtrl::exseq_main_region_off()
{
	/* Default exit sequence for state off */
	exseq_main_region_off_r1();
	stateConfVector[0] = TrafficLightCtrl::State::NO_STATE;
}

/* Default exit sequence for state YellowOn */
void TrafficLightCtrl::exseq_main_region_off_r1_YellowOn()
{
	/* Default exit sequence for state YellowOn */
	stateConfVector[0] = TrafficLightCtrl::State::main_region_off;
	exact_main_region_off_r1_YellowOn();
}

/* Default exit sequence for state YellowOff */
void TrafficLightCtrl::exseq_main_region_off_r1_YellowOff()
{
	/* Default exit sequence for state YellowOff */
	stateConfVector[0] = TrafficLightCtrl::State::main_region_off;
	exact_main_region_off_r1_YellowOff();
}

/* Default exit sequence for region main region */
void TrafficLightCtrl::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of TrafficLightCtrl.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case TrafficLightCtrl::State::main_region_on :
		{
			exseq_main_region_on();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetGreen :
		{
			exseq_main_region_on_r1_StreetGreen();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting :
		{
			exseq_main_region_on_r1_PedWaiting();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOn :
		{
			exseq_main_region_on_r1_PedWaiting_r1_waitOn();
			exact_main_region_on_r1_PedWaiting();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOff :
		{
			exseq_main_region_on_r1_PedWaiting_r1_waitOff();
			exact_main_region_on_r1_PedWaiting();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetAttention :
		{
			exseq_main_region_on_r1_StreetAttention();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetRed :
		{
			exseq_main_region_on_r1_StreetRed();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedestrianGreen :
		{
			exseq_main_region_on_r1_PedestrianGreen();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedestrianRed :
		{
			exseq_main_region_on_r1_PedestrianRed();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetPrepare :
		{
			exseq_main_region_on_r1_StreetPrepare();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_Safe :
		{
			exseq_main_region_on_r1_Safe();
			break;
		}
		case TrafficLightCtrl::State::main_region_off :
		{
			exseq_main_region_off();
			break;
		}
		case TrafficLightCtrl::State::main_region_off_r1_YellowOn :
		{
			exseq_main_region_off_r1_YellowOn();
			break;
		}
		case TrafficLightCtrl::State::main_region_off_r1_YellowOff :
		{
			exseq_main_region_off_r1_YellowOff();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region r1 */
void TrafficLightCtrl::exseq_main_region_on_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of TrafficLightCtrl.main_region.on.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case TrafficLightCtrl::State::main_region_on_r1_StreetGreen :
		{
			exseq_main_region_on_r1_StreetGreen();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting :
		{
			exseq_main_region_on_r1_PedWaiting();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOn :
		{
			exseq_main_region_on_r1_PedWaiting_r1_waitOn();
			exact_main_region_on_r1_PedWaiting();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOff :
		{
			exseq_main_region_on_r1_PedWaiting_r1_waitOff();
			exact_main_region_on_r1_PedWaiting();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetAttention :
		{
			exseq_main_region_on_r1_StreetAttention();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetRed :
		{
			exseq_main_region_on_r1_StreetRed();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedestrianGreen :
		{
			exseq_main_region_on_r1_PedestrianGreen();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedestrianRed :
		{
			exseq_main_region_on_r1_PedestrianRed();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetPrepare :
		{
			exseq_main_region_on_r1_StreetPrepare();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_Safe :
		{
			exseq_main_region_on_r1_Safe();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region r1 */
void TrafficLightCtrl::exseq_main_region_on_r1_PedWaiting_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of TrafficLightCtrl.main_region.on.r1.PedWaiting.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOn :
		{
			exseq_main_region_on_r1_PedWaiting_r1_waitOn();
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOff :
		{
			exseq_main_region_on_r1_PedWaiting_r1_waitOff();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region r1 */
void TrafficLightCtrl::exseq_main_region_off_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of TrafficLightCtrl.main_region.off.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case TrafficLightCtrl::State::main_region_off_r1_YellowOn :
		{
			exseq_main_region_off_r1_YellowOn();
			break;
		}
		case TrafficLightCtrl::State::main_region_off_r1_YellowOff :
		{
			exseq_main_region_off_r1_YellowOff();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default react sequence for initial entry  */
void TrafficLightCtrl::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_off_default();
}

/* Default react sequence for initial entry  */
void TrafficLightCtrl::react_main_region_on_r1_PedWaiting_r1__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_on_r1_PedWaiting_r1_waitOn_default();
}

/* Default react sequence for initial entry  */
void TrafficLightCtrl::react_main_region_on_r1__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_on_r1_Safe_default();
}

/* Default react sequence for initial entry  */
void TrafficLightCtrl::react_main_region_off_r1__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_off_r1_YellowOn_default();
}

sc::integer TrafficLightCtrl::react(const sc::integer transitioned_before) {
	/* State machine reactions. */
	if (current.timeEvents.TrafficLightCtrl_time_event_0_raised)
	{ 
		ifaceOperationCallback->synchronize();
	} 
	return transitioned_before;
}

sc::integer TrafficLightCtrl::main_region_on_react(const sc::integer transitioned_before) {
	/* The reactions of state on. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.iface.onOff_raised)
		{ 
			exseq_main_region_on();
			enseq_main_region_off_default();
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_on_r1_StreetGreen_react(const sc::integer transitioned_before) {
	/* The reactions of state StreetGreen. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.iface.pedestrianRequest_raised)
		{ 
			exseq_main_region_on_r1_StreetGreen();
			enseq_main_region_on_r1_PedWaiting_default();
			main_region_on_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_on_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_on_r1_PedWaiting_react(const sc::integer transitioned_before) {
	/* The reactions of state PedWaiting. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedWaiting_time_event_0_raised)
		{ 
			exseq_main_region_on_r1_PedWaiting();
			current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedWaiting_time_event_0_raised = false;
			enseq_main_region_on_r1_StreetAttention_default();
			main_region_on_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_on_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_on_r1_PedWaiting_r1_waitOn_react(const sc::integer transitioned_before) {
	/* The reactions of state waitOn. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedWaiting_r1_waitOn_time_event_0_raised)
		{ 
			exseq_main_region_on_r1_PedWaiting_r1_waitOn();
			current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedWaiting_r1_waitOn_time_event_0_raised = false;
			enseq_main_region_on_r1_PedWaiting_r1_waitOff_default();
			main_region_on_r1_PedWaiting_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_on_r1_PedWaiting_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_on_r1_PedWaiting_r1_waitOff_react(const sc::integer transitioned_before) {
	/* The reactions of state waitOff. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedWaiting_r1_waitOff_time_event_0_raised)
		{ 
			exseq_main_region_on_r1_PedWaiting_r1_waitOff();
			current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedWaiting_r1_waitOff_time_event_0_raised = false;
			enseq_main_region_on_r1_PedWaiting_r1_waitOn_default();
			main_region_on_r1_PedWaiting_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_on_r1_PedWaiting_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_on_r1_StreetAttention_react(const sc::integer transitioned_before) {
	/* The reactions of state StreetAttention. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.TrafficLightCtrl_main_region_on_r1_StreetAttention_time_event_0_raised)
		{ 
			exseq_main_region_on_r1_StreetAttention();
			current.timeEvents.TrafficLightCtrl_main_region_on_r1_StreetAttention_time_event_0_raised = false;
			enseq_main_region_on_r1_StreetRed_default();
			main_region_on_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_on_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_on_r1_StreetRed_react(const sc::integer transitioned_before) {
	/* The reactions of state StreetRed. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.TrafficLightCtrl_main_region_on_r1_StreetRed_time_event_0_raised)
		{ 
			exseq_main_region_on_r1_StreetRed();
			current.timeEvents.TrafficLightCtrl_main_region_on_r1_StreetRed_time_event_0_raised = false;
			enseq_main_region_on_r1_PedestrianGreen_default();
			main_region_on_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_on_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_on_r1_PedestrianGreen_react(const sc::integer transitioned_before) {
	/* The reactions of state PedestrianGreen. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedestrianGreen_time_event_0_raised)
		{ 
			exseq_main_region_on_r1_PedestrianGreen();
			current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedestrianGreen_time_event_0_raised = false;
			enseq_main_region_on_r1_PedestrianRed_default();
			main_region_on_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_on_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_on_r1_PedestrianRed_react(const sc::integer transitioned_before) {
	/* The reactions of state PedestrianRed. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedestrianRed_time_event_0_raised)
		{ 
			exseq_main_region_on_r1_PedestrianRed();
			current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedestrianRed_time_event_0_raised = false;
			enseq_main_region_on_r1_StreetPrepare_default();
			main_region_on_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_on_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_on_r1_StreetPrepare_react(const sc::integer transitioned_before) {
	/* The reactions of state StreetPrepare. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.TrafficLightCtrl_main_region_on_r1_StreetPrepare_time_event_0_raised)
		{ 
			exseq_main_region_on_r1_StreetPrepare();
			current.timeEvents.TrafficLightCtrl_main_region_on_r1_StreetPrepare_time_event_0_raised = false;
			enseq_main_region_on_r1_StreetGreen_default();
			main_region_on_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_on_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_on_r1_Safe_react(const sc::integer transitioned_before) {
	/* The reactions of state Safe. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.TrafficLightCtrl_main_region_on_r1_Safe_time_event_0_raised)
		{ 
			exseq_main_region_on_r1_Safe();
			current.timeEvents.TrafficLightCtrl_main_region_on_r1_Safe_time_event_0_raised = false;
			enseq_main_region_on_r1_StreetPrepare_default();
			main_region_on_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_on_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_off_react(const sc::integer transitioned_before) {
	/* The reactions of state off. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.iface.onOff_raised)
		{ 
			exseq_main_region_off();
			enseq_main_region_on_default();
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_off_r1_YellowOn_react(const sc::integer transitioned_before) {
	/* The reactions of state YellowOn. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.TrafficLightCtrl_main_region_off_r1_YellowOn_time_event_0_raised)
		{ 
			exseq_main_region_off_r1_YellowOn();
			current.timeEvents.TrafficLightCtrl_main_region_off_r1_YellowOn_time_event_0_raised = false;
			enseq_main_region_off_r1_YellowOff_default();
			main_region_off_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_off_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightCtrl::main_region_off_r1_YellowOff_react(const sc::integer transitioned_before) {
	/* The reactions of state YellowOff. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.TrafficLightCtrl_main_region_off_r1_YellowOff_time_event_0_raised)
		{ 
			exseq_main_region_off_r1_YellowOff();
			current.timeEvents.TrafficLightCtrl_main_region_off_r1_YellowOff_time_event_0_raised = false;
			enseq_main_region_off_r1_YellowOn_default();
			main_region_off_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_off_react(transitioned_before);
	} 
	return transitioned_after;
}

void TrafficLightCtrl::swapInEvents() noexcept {
	current.iface.pedestrianRequest_raised = pedestrianRequest_raised;
	pedestrianRequest_raised = false;
	current.iface.onOff_raised = onOff_raised;
	onOff_raised = false;
	current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedWaiting_time_event_0_raised = timeEvents[0];
	timeEvents[0] = false;
	current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedWaiting_r1_waitOn_time_event_0_raised = timeEvents[1];
	timeEvents[1] = false;
	current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedWaiting_r1_waitOff_time_event_0_raised = timeEvents[2];
	timeEvents[2] = false;
	current.timeEvents.TrafficLightCtrl_main_region_on_r1_StreetAttention_time_event_0_raised = timeEvents[3];
	timeEvents[3] = false;
	current.timeEvents.TrafficLightCtrl_main_region_on_r1_StreetRed_time_event_0_raised = timeEvents[4];
	timeEvents[4] = false;
	current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedestrianGreen_time_event_0_raised = timeEvents[5];
	timeEvents[5] = false;
	current.timeEvents.TrafficLightCtrl_main_region_on_r1_PedestrianRed_time_event_0_raised = timeEvents[6];
	timeEvents[6] = false;
	current.timeEvents.TrafficLightCtrl_main_region_on_r1_StreetPrepare_time_event_0_raised = timeEvents[7];
	timeEvents[7] = false;
	current.timeEvents.TrafficLightCtrl_main_region_on_r1_Safe_time_event_0_raised = timeEvents[8];
	timeEvents[8] = false;
	current.timeEvents.TrafficLightCtrl_main_region_off_r1_YellowOn_time_event_0_raised = timeEvents[9];
	timeEvents[9] = false;
	current.timeEvents.TrafficLightCtrl_main_region_off_r1_YellowOff_time_event_0_raised = timeEvents[10];
	timeEvents[10] = false;
	current.timeEvents.TrafficLightCtrl_time_event_0_raised = timeEvents[11];
	timeEvents[11] = false;
}

void TrafficLightCtrl::clearInEvents() noexcept {
	pedestrianRequest_raised = false;
	onOff_raised = false;
	timeEvents[0] = false;
	timeEvents[1] = false;
	timeEvents[2] = false;
	timeEvents[3] = false;
	timeEvents[4] = false;
	timeEvents[5] = false;
	timeEvents[6] = false;
	timeEvents[7] = false;
	timeEvents[8] = false;
	timeEvents[9] = false;
	timeEvents[10] = false;
	timeEvents[11] = false;
}

void TrafficLightCtrl::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case TrafficLightCtrl::State::main_region_on_r1_StreetGreen :
		{
			main_region_on_r1_StreetGreen_react(-1);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOn :
		{
			main_region_on_r1_PedWaiting_r1_waitOn_react(-1);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedWaiting_r1_waitOff :
		{
			main_region_on_r1_PedWaiting_r1_waitOff_react(-1);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetAttention :
		{
			main_region_on_r1_StreetAttention_react(-1);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetRed :
		{
			main_region_on_r1_StreetRed_react(-1);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedestrianGreen :
		{
			main_region_on_r1_PedestrianGreen_react(-1);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_PedestrianRed :
		{
			main_region_on_r1_PedestrianRed_react(-1);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_StreetPrepare :
		{
			main_region_on_r1_StreetPrepare_react(-1);
			break;
		}
		case TrafficLightCtrl::State::main_region_on_r1_Safe :
		{
			main_region_on_r1_Safe_react(-1);
			break;
		}
		case TrafficLightCtrl::State::main_region_off_r1_YellowOn :
		{
			main_region_off_r1_YellowOn_react(-1);
			break;
		}
		case TrafficLightCtrl::State::main_region_off_r1_YellowOff :
		{
			main_region_off_r1_YellowOff_react(-1);
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

void TrafficLightCtrl::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	swapInEvents();
	microStep();
	isExecuting = false;
}

void TrafficLightCtrl::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart TrafficLightCtrl */
	/* Entry action for statechart 'TrafficLightCtrl'. */
	timerService->setTimer(this, 11, (static_cast<sc::time> (200)), true);
	enseq_main_region_default();
	isExecuting = false;
}

void TrafficLightCtrl::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart TrafficLightCtrl */
	exseq_main_region();
	stateConfVector[0] = TrafficLightCtrl::State::NO_STATE;
	/* Exit action for state 'TrafficLightCtrl'. */
	timerService->unsetTimer(this, 11);
	isExecuting = false;
}



